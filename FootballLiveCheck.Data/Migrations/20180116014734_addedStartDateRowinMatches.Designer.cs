// <auto-generated />
using FootballLiveCheck.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FootballLiveCheck.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180116014734_addedStartDateRowinMatches")]
    partial class addedStartDateRowinMatches
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FootballLiveCheck.Domain.Entities.Arena", b =>
                {
                    b.Property<int>("DbId");

                    b.Property<string>("Capacity");

                    b.Property<string>("Name");

                    b.HasKey("DbId");

                    b.ToTable("Arena");
                });

            modelBuilder.Entity("FootballLiveCheck.Domain.Entities.League", b =>
                {
                    b.Property<int>("DbId");

                    b.Property<string>("FlagURL");

                    b.Property<string>("Name");

                    b.Property<int?>("RegionId");

                    b.Property<string>("ShortName");

                    b.HasKey("DbId");

                    b.HasIndex("RegionId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("FootballLiveCheck.Domain.Entities.Match", b =>
                {
                    b.Property<int>("DbId");

                    b.Property<int?>("ArenaId");

                    b.Property<int>("AwayGoals");

                    b.Property<int>("AwayTeamId");

                    b.Property<int>("CurrentState");

                    b.Property<int>("HomeGoals");

                    b.Property<int>("HomeTeamId");

                    b.Property<int>("LeagueId");

                    b.Property<int>("SeasonId");

                    b.Property<string>("Start");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("TeamDbId");

                    b.HasKey("DbId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamDbId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("FootballLiveCheck.Domain.Entities.Region", b =>
                {
                    b.Property<int>("DbId");

                    b.Property<string>("FlagUrl");

                    b.Property<string>("Name");

                    b.HasKey("DbId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("FootballLiveCheck.Domain.Entities.Season", b =>
                {
                    b.Property<int>("DbId");

                    b.Property<string>("Name");

                    b.HasKey("DbId");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("FootballLiveCheck.Domain.Entities.Team", b =>
                {
                    b.Property<int>("DbId");

                    b.Property<int?>("ArenaId");

                    b.Property<string>("Name");

                    b.Property<string>("ShirtUrl");

                    b.Property<string>("ShortCode");

                    b.Property<string>("ShortName");

                    b.Property<bool>("isNational");

                    b.HasKey("DbId");

                    b.HasIndex("ArenaId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FootballLiveCheck.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FootballLiveCheck.Domain.Entities.League", b =>
                {
                    b.HasOne("FootballLiveCheck.Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("FootballLiveCheck.Domain.Entities.Match", b =>
                {
                    b.HasOne("FootballLiveCheck.Domain.Entities.Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballLiveCheck.Domain.Entities.Team")
                        .WithMany("Matches")
                        .HasForeignKey("TeamDbId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FootballLiveCheck.Domain.Entities.Team", b =>
                {
                    b.HasOne("FootballLiveCheck.Domain.Entities.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");
                });
#pragma warning restore 612, 618
        }
    }
}
